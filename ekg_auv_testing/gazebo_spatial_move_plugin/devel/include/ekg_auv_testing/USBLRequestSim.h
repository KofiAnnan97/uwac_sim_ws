// Generated by gencpp from file ekg_auv_testing/USBLRequestSim.msg
// DO NOT EDIT!


#ifndef EKG_AUV_TESTING_MESSAGE_USBLREQUESTSIM_H
#define EKG_AUV_TESTING_MESSAGE_USBLREQUESTSIM_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ekg_auv_testing
{
template <class ContainerAllocator>
struct USBLRequestSim_
{
  typedef USBLRequestSim_<ContainerAllocator> Type;

  USBLRequestSim_()
    : transceiverID(0)
    , responseID(0)
    , transponderModelName()
    , data()  {
    }
  USBLRequestSim_(const ContainerAllocator& _alloc)
    : transceiverID(0)
    , responseID(0)
    , transponderModelName(_alloc)
    , data(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _transceiverID_type;
  _transceiverID_type transceiverID;

   typedef int32_t _responseID_type;
  _responseID_type responseID;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _transponderModelName_type;
  _transponderModelName_type transponderModelName;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _data_type;
  _data_type data;





  typedef boost::shared_ptr< ::ekg_auv_testing::USBLRequestSim_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ekg_auv_testing::USBLRequestSim_<ContainerAllocator> const> ConstPtr;

}; // struct USBLRequestSim_

typedef ::ekg_auv_testing::USBLRequestSim_<std::allocator<void> > USBLRequestSim;

typedef boost::shared_ptr< ::ekg_auv_testing::USBLRequestSim > USBLRequestSimPtr;
typedef boost::shared_ptr< ::ekg_auv_testing::USBLRequestSim const> USBLRequestSimConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ekg_auv_testing::USBLRequestSim_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ekg_auv_testing::USBLRequestSim_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ekg_auv_testing::USBLRequestSim_<ContainerAllocator1> & lhs, const ::ekg_auv_testing::USBLRequestSim_<ContainerAllocator2> & rhs)
{
  return lhs.transceiverID == rhs.transceiverID &&
    lhs.responseID == rhs.responseID &&
    lhs.transponderModelName == rhs.transponderModelName &&
    lhs.data == rhs.data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ekg_auv_testing::USBLRequestSim_<ContainerAllocator1> & lhs, const ::ekg_auv_testing::USBLRequestSim_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ekg_auv_testing

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ekg_auv_testing::USBLRequestSim_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ekg_auv_testing::USBLRequestSim_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ekg_auv_testing::USBLRequestSim_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ekg_auv_testing::USBLRequestSim_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ekg_auv_testing::USBLRequestSim_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ekg_auv_testing::USBLRequestSim_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ekg_auv_testing::USBLRequestSim_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4428d1e14a31634a968c9e0bbb5fc775";
  }

  static const char* value(const ::ekg_auv_testing::USBLRequestSim_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4428d1e14a31634aULL;
  static const uint64_t static_value2 = 0x968c9e0bbb5fc775ULL;
};

template<class ContainerAllocator>
struct DataType< ::ekg_auv_testing::USBLRequestSim_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ekg_auv_testing/USBLRequestSim";
  }

  static const char* value(const ::ekg_auv_testing::USBLRequestSim_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ekg_auv_testing::USBLRequestSim_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 transceiverID\n"
"int32 responseID\n"
"string transponderModelName\n"
"string data\n"
;
  }

  static const char* value(const ::ekg_auv_testing::USBLRequestSim_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ekg_auv_testing::USBLRequestSim_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.transceiverID);
      stream.next(m.responseID);
      stream.next(m.transponderModelName);
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct USBLRequestSim_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ekg_auv_testing::USBLRequestSim_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ekg_auv_testing::USBLRequestSim_<ContainerAllocator>& v)
  {
    s << indent << "transceiverID: ";
    Printer<int32_t>::stream(s, indent + "  ", v.transceiverID);
    s << indent << "responseID: ";
    Printer<int32_t>::stream(s, indent + "  ", v.responseID);
    s << indent << "transponderModelName: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.transponderModelName);
    s << indent << "data: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.data);
  }
};

} // namespace message_operations
} // namespace ros

#endif // EKG_AUV_TESTING_MESSAGE_USBLREQUESTSIM_H
